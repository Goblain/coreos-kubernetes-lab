---
- hosts: master
  user: core
  gather_facts: false

  vars:
  - version: 1.1.4

  tasks:
  - raw: sudo mkdir -p /etc/kubernetes/ssl
  - raw: sudo mkdir -p /etc/kubernetes/podmaster
  - raw: sudo mkdir -p /etc/kubernetes/manifests
  - raw: sudo chown core /etc/kubernetes/ssl
  - raw: sudo chown core /etc/kubernetes/podmaster
  - raw: sudo chown core /etc/kubernetes/manifests
  - shell: scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ ansible_ssh_private_key_file }} -P {{ ansible_ssh_port }} {{item.src}} core@{{ ansible_ssh_host }}:{{item.dest}}
    connection: local
    with_items:
    - src: .work/kube-ca/apiserver.pem
      dest: /etc/kubernetes/ssl/apiserver.pem
    - src: .work/kube-ca/apiserver-key.pem
      dest: /etc/kubernetes/ssl/apiserver-key.pem
    - src: provisioning/manifests/kube-controller-manager.manifest
      dest: /etc/kubernetes/podmaster/kube-controller-manager.manifest
    - src: provisioning/manifests/kube-scheduler.manifest
      dest: /etc/kubernetes/podmaster/kube-scheduler.manifest
    - src: provisioning/manifests/podmaster.manifest
      dest: /etc/kubernetes/manifests/podmaster.manifest

- hosts: master[0]
  user: core
  gather_facts: false

  vars:
  - version: 1.1.4

  tasks:

  - template: src=apiserver.service.j2 dest=/tmp/apiserver.service
    connection: local
  - shell: scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ ansible_ssh_private_key_file }} -P {{ ansible_ssh_port }} /tmp/apiserver.service core@{{ ansible_ssh_host }}:apiserver.service
    connection: local
  - raw: fleetctl load apiserver.service
  - pause: seconds=1
  - raw: fleetctl start apiserver.service
  - file: path=/tmp/apiserver.service state=absent
    connection: local
  - pause: seconds=10 # ca be replaced with wait_for port=8080 for python enabled servers

  - template: src=kubelet.service.j2 dest=/tmp/kubelet.service
    connection: local
  - shell: scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ ansible_ssh_private_key_file }} -P {{ ansible_ssh_port }} /tmp/kubelet.service core@{{ ansible_ssh_host }}:kubelet.service
    connection: local
  - raw: fleetctl load kubelet.service
  - pause: seconds=1
  - raw: fleetctl start kubelet.service
  - file: path=/tmp/kubelet.service state=absent
    connection: local

  - template: src=proxy.service.j2 dest=/tmp/proxy.service
    connection: local
  - shell: scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i {{ ansible_ssh_private_key_file }} -P {{ ansible_ssh_port }} /tmp/proxy.service core@{{ ansible_ssh_host }}:proxy.service
    connection: local
  - raw: fleetctl load proxy.service
  - pause: seconds=1
  - raw: fleetctl start proxy.service
  - file: path=/tmp/proxy.service state=absent
    connection: local

#  - pause: seconds=10

#- hosts: all
#  user: core
#  gather_facts: false
#  serial: 1
#
#  vars:
#  - version: 1.1.4
#
#  tasks:
#  - raw: bash -c "while true; do UNITS=$(systemctl | grep kubelet | grep activ | awk '{ print $1 }'); [ "$UNITS" == "" ] && break; sudo systemctl stop $UNITS; sleep 1; done"
#  - raw: sudo systemctl restart kubelet-{{version}}.service